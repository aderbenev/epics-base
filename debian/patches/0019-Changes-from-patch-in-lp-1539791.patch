From: Andrew Johnson <anj@aps.anl.gov>
Date: Tue, 23 Feb 2016 15:43:26 -0600
Subject: Changes from patch in lp:1539791

Conflicts:
	documentation/RELEASE_NOTES.html
---
 documentation/RELEASE_NOTES.html      | 10 ++++++++++
 src/ioc/misc/dbCore.dbd               |  3 +++
 src/ioc/misc/iocInit.c                | 10 ++++++++--
 src/libCom/osi/epicsThread.h          |  6 ++++++
 src/libCom/osi/os/RTEMS/osdThread.c   |  3 +++
 src/libCom/osi/os/WIN32/osdThread.c   |  4 ++++
 src/libCom/osi/os/posix/osdThread.c   | 32 ++++++++++++++++++--------------
 src/libCom/osi/os/vxWorks/osdThread.c |  3 +++
 8 files changed, 55 insertions(+), 16 deletions(-)

diff --git a/documentation/RELEASE_NOTES.html b/documentation/RELEASE_NOTES.html
index 80a7577..d290376 100644
--- a/documentation/RELEASE_NOTES.html
+++ b/documentation/RELEASE_NOTES.html
@@ -9,6 +9,16 @@
 <body lang="en">
 <h1 align="center">EPICS Base Release 3.15.3</h1>
 
+<h3>Moved <tt>mlockall()</tt> into its own epicsThread routine</h3>
+
+<p>Since EPICS Base 3.15.0.2 on Posix OSs the initialization of the epicsThread
+subsystem has called <tt>mlockall()</tt> when the OS supports it and thread
+priority scheduling is enabled. Doing so has caused problems in third-party
+applications that call the CA client library, so the functionality has been
+moved to a separate routine <tt>epicsThreadRealtimeLock()</tt> which will be
+called by the IOC at iocInit (unless disabled by setting the global variable
+<tt>dbThreadRealtimeLock</tt> to zero).</p>
+
 <h2 align="center">Changes between 3.15.2 and 3.15.3</h2>
 <!-- Insert new items immediately below here ... -->
 
diff --git a/src/ioc/misc/dbCore.dbd b/src/ioc/misc/dbCore.dbd
index a849597..e5bbbff 100644
--- a/src/ioc/misc/dbCore.dbd
+++ b/src/ioc/misc/dbCore.dbd
@@ -19,3 +19,6 @@ variable(dbBptNotMonotonic,int)
 variable(dbTemplateMaxVars,int)
 # Default number of parallel callback threads
 variable(callbackParallelThreadsDefault,int)
+
+# Real-time operation
+variable(dbThreadRealtimeLock,int)
diff --git a/src/ioc/misc/iocInit.c b/src/ioc/misc/iocInit.c
index e9db4a6..26cbe39 100644
--- a/src/ioc/misc/iocInit.c
+++ b/src/ioc/misc/iocInit.c
@@ -36,7 +36,7 @@
 
 #include "caeventmask.h"
 
-#define epicsExportSharedSymbols
+#include "epicsExport.h" /* defines epicsExportSharedSymbols */
 #include "alarm.h"
 #include "asDbLib.h"
 #include "callback.h"
@@ -86,7 +86,9 @@ static void initDatabase(void);
 static void initialProcess(void);
 static void exitDatabase(void *dummy);
 
-
+int dbThreadRealtimeLock = 1;
+epicsExportAddress(int, dbThreadRealtimeLock);
+
 /*
  *  Initialize EPICS on the IOC.
  */
@@ -186,6 +188,10 @@ int iocBuild(void)
     rsrv_init();
 
     status = iocBuild_3();
+
+    if (dbThreadRealtimeLock)
+        epicsThreadRealtimeLock();
+
     if (!status) iocBuildMode = buildRSRV;
     return status;
 }
diff --git a/src/libCom/osi/epicsThread.h b/src/libCom/osi/epicsThread.h
index e326343..84b2c47 100644
--- a/src/libCom/osi/epicsThread.h
+++ b/src/libCom/osi/epicsThread.h
@@ -57,6 +57,12 @@ typedef epicsThreadId epicsThreadOnceId;
 epicsShareFunc void epicsShareAPI epicsThreadOnce(
     epicsThreadOnceId *id, EPICSTHREADFUNC, void *arg);
 
+/* When real-time scheduling is active, attempt any post-init operations
+ * that preserve real-time performance. For POSIX targets this locks the
+ * process into RAM, preventing swap-related VM faults.
+ */
+epicsShareFunc void epicsThreadRealtimeLock(void);
+
 epicsShareFunc void epicsShareAPI epicsThreadExitMain(void);
 
 epicsShareFunc epicsThreadId epicsShareAPI epicsThreadCreate (
diff --git a/src/libCom/osi/os/RTEMS/osdThread.c b/src/libCom/osi/os/RTEMS/osdThread.c
index b7af4d5..8e2a5e0 100644
--- a/src/libCom/osi/os/RTEMS/osdThread.c
+++ b/src/libCom/osi/os/RTEMS/osdThread.c
@@ -248,6 +248,9 @@ epicsThreadInit (void)
     }
 }
 
+void epicsThreadRealtimeLock(void)
+{}
+
 /*
  * Create and start a new thread
  */
diff --git a/src/libCom/osi/os/WIN32/osdThread.c b/src/libCom/osi/os/WIN32/osdThread.c
index 2b41132..0d4376c 100644
--- a/src/libCom/osi/os/WIN32/osdThread.c
+++ b/src/libCom/osi/os/WIN32/osdThread.c
@@ -303,6 +303,10 @@ static unsigned osdPriorityMagFromPriorityOSI ( unsigned osiPriority, unsigned p
     return magnitude;
 }
 
+epicsShareFunc
+void epicsThreadRealtimeLock(void)
+{}
+
 /*
  * epicsThreadGetOsdPriorityValue ()
  */
diff --git a/src/libCom/osi/os/posix/osdThread.c b/src/libCom/osi/os/posix/osdThread.c
index 57d663f..755390e 100644
--- a/src/libCom/osi/os/posix/osdThread.c
+++ b/src/libCom/osi/os/posix/osdThread.c
@@ -357,21 +357,10 @@ static void once(void)
             pcommonAttr->maxPriority);
     }
 
-#if defined(_POSIX_MEMLOCK) && _POSIX_MEMLOCK > 0
-    if(errVerbose)  { 
-        fprintf(stderr, "LRT: min priority: %d max priority %d\n", 
+    if (errVerbose) {
+        fprintf(stderr, "LRT: min priority: %d max priority %d\n",
             pcommonAttr->minPriority, pcommonAttr->maxPriority);
     }
-    if (pcommonAttr->maxPriority > pcommonAttr->minPriority) {
-        status = mlockall(MCL_CURRENT | MCL_FUTURE);
-        if(status) { 
-            fprintf(stderr, "Unable to lock the virtual address space using mlockall\n");
-        } else { 
-            fprintf(stderr,"Successfully locked memory using mlockAll\n");
-        }
-    }
-#endif
-
 
 #else
     if(errVerbose) fprintf(stderr,"task priorities are not implemented\n");
@@ -425,7 +414,22 @@ static void epicsThreadInit(void)
     checkStatusQuit(status,"pthread_once","epicsThreadInit");
 }
 
-
+epicsShareFunc
+void epicsThreadRealtimeLock(void)
+{
+#if defined(_POSIX_MEMLOCK) && _POSIX_MEMLOCK > 0
+    if (pcommonAttr->maxPriority > pcommonAttr->minPriority) {
+        int status = mlockall(MCL_CURRENT | MCL_FUTURE);
+
+        if (status) {
+            fprintf(stderr, "epicsThreadRealtimeLock "
+                "Warning: Unable to lock the virtual address space.\n"
+                "VM page faults may harm real-time performance.\n");
+        }
+    }
+#endif
+}
+
 epicsShareFunc unsigned int epicsShareAPI epicsThreadGetStackSize (epicsThreadStackSizeClass stackSizeClass)
 {
 #if defined (OSITHREAD_USE_DEFAULT_STACK)
diff --git a/src/libCom/osi/os/vxWorks/osdThread.c b/src/libCom/osi/os/vxWorks/osdThread.c
index 9a6e8cb..ce01ea6 100644
--- a/src/libCom/osi/os/vxWorks/osdThread.c
+++ b/src/libCom/osi/os/vxWorks/osdThread.c
@@ -114,6 +114,9 @@ static void epicsThreadInit(void)
     lock = 0;
 }
 
+void epicsThreadRealtimeLock(void)
+{}
+
 unsigned int epicsThreadGetStackSize (epicsThreadStackSizeClass stackSizeClass) 
 {
 

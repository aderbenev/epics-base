From: Andrew Johnson <anj@aps.anl.gov>
Date: Wed, 5 Nov 2014 10:06:02 -0600
Subject: Fix buffer overflow in epicsStrnRawFromEscaped

lp:1388313
---
 documentation/RELEASE_NOTES.html  |  5 +++++
 src/libCom/misc/epicsString.c     |  7 ++++++-
 src/libCom/test/epicsStringTest.c | 40 ++++++++++++++++++++++++++++++++++++++-
 3 files changed, 50 insertions(+), 2 deletions(-)

diff --git a/documentation/RELEASE_NOTES.html b/documentation/RELEASE_NOTES.html
index 69c5058..64cfeab 100644
--- a/documentation/RELEASE_NOTES.html
+++ b/documentation/RELEASE_NOTES.html
@@ -13,6 +13,11 @@
 
 <!-- Insert new items immediately below here ... -->
 
+<h3>Fix buffer overflow in epicsStrnRawFromEscaped()</h3>
+
+<p>Launchpad <a href="https://bugs.launchpad.net/bugs/1388313">bug
+1388313</a> reported by Bruce Hill and Chris Ford.</p>
+
 <h3>Reject NULL callback functions in ca_array_*_callback</h3>
 
 <p>The two CA routines ca_array_get_callback() and ca_array_put_callback() were
diff --git a/src/libCom/misc/epicsString.c b/src/libCom/misc/epicsString.c
index 08b7089..9028675 100644
--- a/src/libCom/misc/epicsString.c
+++ b/src/libCom/misc/epicsString.c
@@ -43,6 +43,9 @@ int epicsStrnRawFromEscaped(char *to, size_t outsize, const char *from,
     char        c;
     int         nto = 0, nfrom = 0;
 
+    if (outsize == 0)
+        return 0;
+
     while ((c = *pfrom++) && nto < outsize && nfrom < inlen) {
         nfrom++;
         if (c == '\\') {
@@ -100,7 +103,9 @@ int epicsStrnRawFromEscaped(char *to, size_t outsize, const char *from,
             *pto++ = c; nto++;
         }
     }
-    *pto = '\0'; /* NOTE that nto does not have to be incremented */
+    if (nto == outsize)
+        pto--;
+    *pto = '\0';
     return nto;
 }
 
diff --git a/src/libCom/test/epicsStringTest.c b/src/libCom/test/epicsStringTest.c
index ea9a6fc..a191032 100644
--- a/src/libCom/test/epicsStringTest.c
+++ b/src/libCom/test/epicsStringTest.c
@@ -48,9 +48,11 @@ MAIN(epicsStringTest)
     const char * const a     = "a";
     const char * const abcd  = "abcd";
     const char * const abcde = "abcde";
+    char result[8];
     char *s;
+    int status;
 
-    testPlan(281);
+    testPlan(299);
 
     testChars();
 
@@ -85,5 +87,41 @@ MAIN(epicsStringTest)
     testOk1(epicsStrHash(abcd, 0) == epicsMemHash(abcde, 4, 0));
     testOk1(epicsStrHash(abcd, 0) != epicsMemHash("abcd\0", 5, 0));
 
+    memset(result, 'x', sizeof(result));
+    status = epicsStrnEscapedFromRaw(result, 4, ABCD, 3);
+    testOk(status == 3, "epicsStrnEscapedFromRaw returned %d (exp. 3)", status);
+    testOk(result[4] == 'x', "epicsStrnEscapedFromRaw no buffer overrun");
+    testOk(result[3] == 0, "epicsStrnEscapedFromRaw 0-terminated");
+
+    memset(result, 'x', sizeof(result));
+    status = epicsStrnEscapedFromRaw(result, 4, ABCD, 4);
+    testOk(status == 4, "epicsStrnEscapedFromRaw returned %d (exp. 4)", status);
+    testOk(result[4] == 'x', "epicsStrnEscapedFromRaw no buffer overrun");
+    testOk(result[3] == 0, "epicsStrnEscapedFromRaw 0-terminated");
+
+    memset(result, 'x', sizeof(result));
+    status = epicsStrnEscapedFromRaw(result, 4, ABCDE, 5);
+    testOk(status == 5, "epicsStrnEscapedFromRaw returned %d (exp. 5)", status);
+    testOk(result[4] == 'x', "epicsStrnEscapedFromRaw no buffer overrun");
+    testOk(result[3] == 0, "epicsStrnEscapedFromRaw 0-terminated");
+
+    memset(result, 'x', sizeof(result));
+    status = epicsStrnRawFromEscaped(result, 4, ABCD, 3);
+    testOk(status == 3, "epicsStrnRawFromEscaped returned %d (exp. 3)", status);
+    testOk(result[4] == 'x', "epicsStrnRawFromEscaped no buffer overrun");
+    testOk(result[3] == 0, "epicsStrnRawFromEscaped 0-terminated");
+
+    memset(result, 'x', sizeof(result));
+    status = epicsStrnRawFromEscaped(result, 4, ABCD, 4);
+    testOk(status == 4, "epicsStrnRawFromEscaped returned %d (exp. 4)", status);
+    testOk(result[4] == 'x', "epicsStrnRawFromEscaped no buffer overrun");
+    testOk(result[3] == 0, "epicsStrnRawFromEscaped 0-terminated");
+
+    memset(result, 'x', sizeof(result));
+    status = epicsStrnRawFromEscaped(result, 4, ABCDE, 5);
+    testOk(status == 4, "epicsStrnRawFromEscaped returned %d (exp. 4)", status);
+    testOk(result[4] == 'x', "epicsStrnRawFromEscaped no buffer overrun");
+    testOk(result[3] == 0, "epicsStrnRawFromEscaped 0-terminated");
+
     return testDone();
 }
